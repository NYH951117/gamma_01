#!/usr/bin/perl
use FileHandle;

$type = 1;
$nr = 32;
$naz = 32;
$mask = "-";
$gcp_win = 3;

if (($#ARGV + 1) < 4){die <<EOS ;}
*** IPTA script: $0
*** Copyright 2005, Gamma Remote Sensing, v1.0 17-Aug-2005 clw ***
*** extract baselines in text form from a pbase file  ***

usage: $0 <RSLC_tab> <itab> <diff_dir> <pbase> 

    RSLC_tab  (input) two column list of resampled SLC filenames and SLC parameter filenames (including paths) (ascii)
    itab      (input) table associating interferogram stack records with pairs of SLC stack records (ascii)
    diff_dir  directory to receive text format baselines  
    pbase     (output) baseline parameter stack                           
EOS

$rslc_tab  = $ARGV[0];
$itab      = $ARGV[1];
$diff_dir  = $ARGV[2];
$pbase     = $ARGV[3];

open(RSLC_TAB, "<$rslc_tab") or die "\nERROR $0: table of resampled SLC images and parameter files does not exist: $rslc_tab\n\n";
print "resampled SLC images and parameter files: $rslc_tab\n"; 

open(ITAB, "<$itab") or die "\nERROR $0: table of interferometric pairs does not exist: $itab\n\n";
print "table of interferometric pairs: $itab\n"; 
-d $diff_dir or die "ERROR $0: differential interferogram directory does not exist\n";
-e $pbase or die "ERROR $0: missing pbase file: $pbase\n";

$log = "$diff_dir/extract_base_2d.log";  
open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
LOG->autoflush;

$time = localtime;
print "\n$0  @ARGV\n";
print "start: $time  log file: $log\n\n";
print "RSLC_tab:               $rslc_tab\n";
print "itab:                   $itab\n";
print "pbase:                  $pbase\n";

print LOG "\n$0  @ARGV\n";
print LOG "start: $time  log file: $log\n\n";
print LOG "RSLC_tab:               $rslc_tab\n";
print LOG "itab:                   $itab\n";
print LOG "pbase:                  $pbase\n";
print LOG "diff. directory:        $diff_dir\n";

$i = 1;
#read in the contents of the RSLC_TAB file and store in arrays
LINE: while (<RSLC_TAB>) {	#read lines of processing list file
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  @slc[$i] = @fields[0];
  @slc_par[$i] = @fields[1];
  -e @slc_par[$i] or die "ERROR $0: ISP image parameter file does not exist for slc: @slc2_pa[$i]\n";
  printf LOG "%2d  @slc[$i]  @slc_par[$i]\n",$i;
  $i++;
} 
print LOG"\n";

$n = 0;
LINE: while (<ITAB>) {		#read lines of processing list file
  $n++;
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  next LINE if (@fields[3] == 0); #do not process interferograms with the layer flag set to 0
  $slc1 = @slc[@fields[0]];
  $slc1_par = @slc_par[@fields[0]];
  $s1 = $slc1;
  $s1 =~/\/*(.*\/)*(.*$)/; 	#match slash * times, match characters followed by slash 0 or times, match to end of line 
  @tok = split /\./, $2;	#take part of filename up to the first ., if present, otherwise, the whole string
  $s1 = @tok[0];

  $slc2 = @slc[@fields[1]];
  $slc2_par = @slc_par[@fields[1]];
  @tok = split /\./, $2;	#take part of filename up to the first ., if present, otherwise, the whole string
  $s2 = $slc2;
  $s2 =~/\/*(.*\/)*(.*$)/; 	#match slash * times, match characters followed by slash 0 or times, match to end of line 
  @tok = split /\./, $2;	#take part of filename up to the first ., if present, otherwise, the whole string
  $s2 = @tok[0];

  $fn = $s1."_".$s2;
  $off =  $diff_dir."/".$fn.".off";
  $base = $diff_dir."/".$fn.".base";

  $time = localtime;
  printf "\n*** diff. interferogram:%4d  $time ***\n",$n;
  print "slc1: $slc1   slc1_par: $slc1_par\n";
  print "slc2: $slc2   slc2_par: $slc2_par\n";
  print "baseline file: $base\n";

  execute("base_par_pt $base $pbase @fields[2] 0",$log) unless $pbase =~ m/-/;	
}
$time = localtime;
print "\nprocessing end: $time\n";
print LOG "\nprocessing end: $time\n";
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR $0 : cannot open log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}
