#!/usr/bin/perl
use FileHandle;
use File::Basename;
use Getopt::Long;

$xmin = "-";	#defaults
$ymin = "-";
$nx = "-";
$ny = "-";
$mode = 1; 	#pol2rec bicubic spline interpolation
$scale = 0.25;
$exp = 0.35;
$phase_scale = .3333;

#command line options parsing, the rest of the arguments are passed to @ARGV
GetOptions ('e=f' => \$exp, 's=f' => \$scale, 'p=f' => \$phase_scale);

if (($#ARGV + 1) < 5){die <<EOS ;}
*** $0
*** Copyright 2011, Gamma Remote Sensing, v1.0 29-Apr-2011 clw ***
*** run pol2rec for a set of differential interferograms in polar coordinates from the GPRI and generate raster images ***

usage: $0 <data_tab> <MLI> <MLI_par> <pix_size> <type> <rmli> [xmin] [nx] [ymin] [ny] 

    data_tab       (input) single column list interferograms including path
    MLI            (input) MLI reference image in polar coordinates
    MLI_par        (input) MLI image parameter file describing geometry of the list of images
    pix_size       output image pixel size (meter, nominal: 1.0)
    type           input data type:
                     0: FLOAT (unwrapped phase)
                     1: FCOMPLEX
    xmin           starting x coordinate (enter - for default: calculated from image)
    nx             number of x samples in the output image (enter - for default: calculated from image
    ymin           starting y coordinate (enter - for default: calculated from image)
    ny             number of y samples in the output image (enter - for default: calculated from image
    -s scale       (option) set image intensity scale factor (default: $scale)   
    -e exp         (option) set image intensity exponent (default: $exp)
    -p phase_scale (option) set phase scale factor for unwrapped phase (default: $phase_scale)
                        
EOS

$data_tab = $ARGV[0];
$mli = $ARGV[1];
$mli_par = $ARGV[2];
$pix_size = $ARGV[3];
$dtype = $ARGV[4];

open(DATA_TAB, "<$data_tab") or die "\nERROR $0: list of interferograms: $data_tab\n\n";

if($#ARGV >= 5){$xmin = $ARGV[5];}
if($#ARGV >= 6){$nx = $ARGV[6];}
if($#ARGV >= 7){$ymin = $ARGV[7];}
if($#ARGV >= 8){$ny= $ARGV[8];}

-e $mli or die "ERROR $0: MLI intensity image file does not exist: $mli\n";
-e $mli_par or die "ERROR $0: MLI intensity image parameter file does not exist: $mli_par\n";

$log = " mk_pol2rec_2d.log";  
open(LOG,">$log") or die "ERROR $0: cannot open mk_pol2rec_2d log file: $log\n";  
my ($s1, $dir1, $ext1) = fileparse($mli, qr/\.[^.]*/); #extension is the last bit after the last period 
$mli_rec = $dir1.$s1."_rec".$ext1;
$mli_rec_par = $mli_rec.".par";
@width = extract_param($mli_par, "range_samples:");

$time = localtime;
print "start: $time  log file: $log\n";
print "data_tab: $data_tab\n";
print "pixel size (m): $pix_size\n";
print "MLI image (polar coord.): $mli   range samples: $width[1]\n";
print "display scale factor: $scale  exponent: $exp\n";

print "\nMLI (rect. coord.): $mli_rec\n";
print "MLI parameter file (rect. coord.): $mli_rec_par\n\n";

open(LOG,">>$log") or die "ERROR $0: cannot open mk_adf_2d log file: $log\n";
print LOG "start: $time  log file: $log\n";
print LOG "data_tab: $data_tab\n";
print LOG "pixel size (m): $pix_size\n";
print LOG "MLI image (polar coord.): $mli   range samples: $width[1]\n";
print LOG "display scale factor: $scale  exponent: $exp\n";
print LOG "\nMLI (rect. coord.): $mli_rec\n";
print LOG "MLI parameter file (rect. coord.): $mli_rec_par\n\n";
close LOG;

print "resampling MLI intensity image:\n";
execute("pol2rec $mli $mli_par $mli_rec $mli_rec_par $pix_size 0 $mode $xmin $nx $ymin $ny", $log);
@width_rec = extract_param($mli_rec_par, "range_samples:");
execute("raspwr $mli_rec $width_rec[1] 1 0 1 1 $scale $exp", $log);

print "\nresampling interferograms:\n";
$i = 1;
#read in the contents of the RSLC_TAB file and store in arrays
LINE: while (<DATA_TAB>) {	#read lines of data table
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  $data = $fields[0];
  -e $data or die "ERROR $0: interferogram file does not exist: $data\n";     
  my ($s2, $dir2, $ext2) = fileparse($data , qr/\.[^.]*/);
  $data_rec = $dir2.$s2."_rec".$ext2;
  $data_rec_par = $data_rec.".par";
  execute("pol2rec $data $mli_par $data_rec $data_rec_par $pix_size $dtype $mode $xmin $nx $ymin $ny", $log);
  if ($dtype == 0){
    execute("rasrmg $data_rec $mli_rec $width_rec[1] 1 1 0 1 1 $phase_scale $scale $exp", $log);
  }
  else {
    execute("rasmph_pwr $data_rec $mli_rec $width_rec[1] 1 1 0 1 1 $scale $exp", $log);
  }
  print "\n";
  $i++;
} 
$n = 1;

$time = localtime;
print "\n$0 processing end: $time\n";
open(LOG,">>$log") or die "ERROR $0: cannot open mk_adf_2d log file: $log\n";
print LOG "\n$0 processing end: $time\n";
close LOG;
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR $0 : cannot open log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}

