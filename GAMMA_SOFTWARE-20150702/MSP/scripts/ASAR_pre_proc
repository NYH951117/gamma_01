#!/usr/bin/perl
use FileHandle;

$MPH_SIZE = 1247;
$DSD_SIZE = 280;

#
if (($#ARGV + 1) < 6){die <<EOS;}
*** $0 
*** Copyright 2006, Gamma Remote Sensing, v1.2 29-Jan-2006 clw ***
*** ASAR raw data pre-processing ***

usage: $0 <ASAR_list> <DORIS_path> <RAW_dir> <log> <proc_list> <mode> [keyword] [value]

    ASAR_list	(input) list of ASAR raw and associated calibration data sets with 4 columns/entry 
                  1. Level 0 ASAR raw data set (ASA_IM__0)
		  2. ASAR instrument characterization data file (ASA_INS)
		  3. ASAR external calibration data file (ASA_XCA)
		  4. DORIS state vector file (DOR_VOR_AXVF)
    DORIS_path  path to DORIS orbit data (example: /usr/local/data/DORIS/vor)
    RAW_dir     directory for output unpacked raw data files and processing parameter files
    log         (output) ASAR_pre_proc processing log file  
    proc_list   (output) processing list for use by ASAR_proc_all
    mode        processing mode:
		  1: create processing parameter files and unpack raw data 
		  2: extract and interpolate DORIS state vectors and update MSP processing parameter files
		  3: estimate Doppler centroid
    		  4: set a value in the processing parameter files for a keyword:value pair (optional)
		  5: generate processing list for use by ASAR_proc_par and ASAR_proc_all
    keyword 	(mode 4 only) search keyword in the MSP processing parameter file (example: doppler_polynomial) 
    value	(mode 4 only) new value delimited by double quotes (example: "317.0 0. 0. 0.")
		   
EOS

$mode = $ARGV[5];
$out_dir = $ARGV[2];

unless (-d $out_dir) {
  print "creating output directory for fixed raw data and MSP processing parameter files: $out_dir\n";
  $exit = system("mkdir $out_dir");
  $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $out_dir\n"
}

open(SLIST, "<$ARGV[0]") or die "ERROR $0: CEOS list does not exist: $ARGV[0]\n";
print "ASAR list: $ARGV[0]\n"; 

$doris_path = $ARGV[1];
(-d $doris_path) or die "ERROR: directory for DORIS orbit data does not exist\n";
print "MSP_HOME: $ENV{MSP_HOME}\n";

$log = "$out_dir"."\/$ARGV[3]";
if($mode != 1){
  open(LOGF,">>$log") or die "ERROR $0: cannot open log file: $log\n";
}
else{
  open(LOGF,">$log") or die "ERROR $0: cannot open log file: $log\n";
}
LOGF->autoflush;		#set filehandle special variable to flush output immediately

print "log file: $log\n";
$time = localtime;
print "\nPROCESSING START: $time  mode: $mode\n";
print LOGF "\nPROCESSING START: $time  mode: $mode\n";

if($mode == 4){
  if (($#ARGV + 1) != 8){die "ERROR $0: keyword value pair are missing\n";}
  $key =  $ARGV[6];
  $value = $ARGV[7];
  print STDOUT "updating value in the MSP processing parameter files\n";
  print STDOUT "keyword: $key   value: $value\n";
}

if($mode == 5){
  $proc_list = $ARGV[4];
  print STDOUT "processing list file: $proc_list\n";
  open(PROCF,">$proc_list") or die "ERROR $0: cannot open output processing list file: $proc_list\n";
}
     
LINE: while (<SLIST>) {	#read list of ASAR data sets
  print "\n";
  chomp $_;
  next LINE if /^$/; 	#skip blank lines in input list
  next LINE if /^#/; 	#skip comments in the input list
  @fields = split;	#extract the entries, splitting on white space
  ($#fields + 1) >= 4 or die "ERROR $0: insuffient number of columns in ASAR_list: $_\n";	#check entries
  $asar = @fields[0];
  (-e $asar) or die "ERROR: ASAR data file $asar does not exist\n";
  $asar_ins = @fields[1];
  (-e $asar_ins) or die "ERROR: ASAR instrument characterization file $asar_ins does not exist\n";
  $asar_xca = @fields[2];
  (-e $asar_xca) or die "ERROR: ASAR external calibration file $asar_xca does not exist\n";
  print "ASAR raw data set: $asar\n";
  print "ASAR instrument characterization file: $asar_ins\n";
  print "ASAR external calibration file: $asar_xca\n";
  $doris = $doris_path."/".@fields[3];
  (-e $doris) or die "ERROR: DORIS state vector file $doris does not exist\n";
  print "DORIS state vector file: $doris\n";
 
  my @asar_params = asar_parse("$asar");

  $product = @asar_params[0];
  $id = @asar_params[1];			#use date to identify scene
  $orbit = @asar_params[2];
  $swath = @asar_params[3];
  $pol = @asar_params[4];
  print "\ndate: $id  orbit: $orbit  swath: $swath  pol: $pol\n";
 
  $proc_par = "$out_dir"."\/p".$id.".slc.par";
  $sensor1 = "ASAR_".$id."_".$swath."_".$pol.".par";
  $antpat1 = "ASAR_".$id."_".$swath."_".$pol.".gain";

  $sensor2 = "$out_dir"."/".$sensor1;
  $antpat2 = "$out_dir"."/".$antpat1;
  
  $raw = "$out_dir/$id.raw";
  $azsp = "$out_dir/$id.azsp";
  print "MSP processing parameter file: $proc_par\n";
  print "MSP sensor parameter file: $sensor\n";
  print "antenna pattern file: $antpat2\n";
  print "raw data file: $raw\n\n";
 
  if($mode == 1){
    execute("ASAR_XCA $asar_xca $antpat2 $swath $pol", $log);
    execute("ASAR_IM_proc $asar $asar_ins $sensor2 $proc_par $raw $antpat2", $log);
    @str = extract_param($proc_par, "title:");
    $title = @str[1]." ".$sensor1;
    execute("set_value $proc_par $proc_par \"title\" \"$title\" ",$log);   
    execute("ORB_prop $proc_par 7 10",$log); 
  }

  if($mode == 2){
    print "DORIS state vector: $doris\n";
    execute("DORIS_proc $proc_par $doris", $log);
  }
  
  if($mode == 3){
    execute("azsp_IQ $sensor2 $proc_par $raw $azsp", $log); 
  }  
  
  if($mode == 4){
    execute("set_value $proc_par $proc_par $key \"$value\"",$log);
  }
  
  if($mode == 5){
    @str = extract_param($proc_par, "doppler_polynomial:");
    $fd = @str[1];
    printf PROCF  "$id - - - - %8.1f 0.0 0.9\n", $fd;
    printf STDOUT "$id - - - - %8.1f 0.0 0.9\n", $fd;
  }
} 
 
$time = localtime;
print "\nPROCESSING END: $time  mode: $mode\n";
print LOGF "\nPROCESSING END: $time mode: $mode\n";
exit 0;

#parse the CEOS leader to extract image and sensor parameters

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}

sub rd_par{
  my ($buf, $keyword, $pattern) = @_;
  @lines = split /^/m, $buf;		#split buffer into lines

  foreach $l1 (@lines) {		#examine each line
    chomp $l1;
    @tok = split /$pattern/, $l1;	#parse using regular expression $pattern 
    if (@tok[0] =~ m/$keyword/) {return @tok;} #if keyword found, return parsed line
  }  
  die "ERROR subrountine rd_par: keyword $keyword not found in data buffer\n";
}
   
sub asar_parse{
  my ($infile)=@_;		# Get passed parameters
  %months = ("JAN","01","FEB","02","MAR","03","APR","04","MAY","05","JUN","06",
             "JUL","07","AUG","08","SEP","09","OCT","10","NOV","11","DEC","12");

  my ($product, $date, $orbit, $swath, $pol, @parms);
  open (INPUT, "$infile") or die "ERROR: opening ASAR raw data file: $infile\n";
  binmode INPUT;
  read (INPUT, $mph, $MPH_SIZE);
   
  @tok = rd_par($mph, "PRODUCT","=");
  $product = @tok[1];
  $date = substr(@tok[1], 15, 8);
#  print "PRODUCT: $product\n";
#  print "date: $date\n";

  @tok = rd_par($mph, "SENSING_START","=");
#  print "SENSING_START: @tok[1]\n";

  @tok = rd_par($mph, "ABS_ORBIT","=");
  $orbit = @tok[1];
#  printf "ABS_ORBIT: %d\n",$orbit;

  @tok = rd_par($mph, "SPH_SIZE","=|<|>");
  $sph_size = @tok[1];
#  printf "SPH_SIZE: @tok   bytes offset: %d\n",$sph_size;

  read (INPUT, $sph, $sph_size, $MPH_SIZE);
  close(INPUT);

  @tok = rd_par($sph, "TX_RX_POLAR","=");
  $pol = substr(@tok[1], 1, 1).substr(@tok[1], 3, 1);	#remove / character
#  print "TX_RX_POLAR: $pol\n";

  @tok = rd_par($sph, "SWATH","=");
  $swath = substr(@tok[1], 1, 3);
#  print "SWATH: $swath\n";
  
  @parms = ("$product", "$date", "$orbit", "$swath", "$pol");
  return @parms;
}

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR : cannot open log file: $log\n";} 
  LOG->autoflush;
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}
