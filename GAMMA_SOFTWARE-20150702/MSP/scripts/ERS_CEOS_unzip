#!/usr/bin/perl
use FileHandle;
use File::Basename;

if (($#ARGV + 1) < 3){die <<EOS;}
*** $0
*** Copyright 2014, Gamma Remote Sensing, v1.0 7-Jun-2014 clw ***
*** Unzip CEOS data sets from ERS ***

usage: $0 <CEOS_zip_list> <out_dir> <log>

    CEOS_zip_list (input) parameter file with 1 column entry/record zip archives of CEOS format ERS data
		    1. ZIP file (including path) containing CEOS data set from ERS
    out_dir     directory for CEOS data sets
    log         (output) unzip processing log file
EOS

$out_dir = $ARGV[1];
unless (-d $out_dir) {
  print "creating output directory for fixed raw data and MSP processing parameter files: $out_dir\n";
  $exit = system("mkdir $out_dir");
  $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $out_dir\n"
}

$log = "$out_dir"."\/$ARGV[2]";
print "log file: $log\n";
open(LOGF,">$log") or die "ERROR $0: cannot open log file: $log\n";
LOGF->autoflush;		#set filehandle special variable to flush output immediately
print LOGF "$0 @ARGV\n\n";	#print command line that was used
$time = localtime;
print "\nPROCESSING START: $time  mode: $mode\n";
print LOGF "\nPROCESSING START: $time  mode: $mode\n";close LOG;
close LOGF;

open(SLIST, "<$ARGV[0]") or die "ERROR $0: CEOS zip list does not exist: $ARGV[0]\n";
print "CEOS zip list: $ARGV[0]\n";
$i = 1;

LINE: while (<SLIST>) {		#read list of zip files with raw data
  chomp $_;
  next LINE if /^$/; 		#skip blank lines in input list
  next LINE if /^#/; 		#skip comments in the input list
  @fields = split;		#extract the identifier
  $zip = $fields[0];
  my ($s1, $dir1, $ext1) = fileparse($zip, qr/\.[^.]*/); #extension is the last bit after the last period
  $ceos_dir = $out_dir."\/".$s1;
  print "*** file: $i  input: $zip   output dir: $ceos_dir ***\n";
  unless (-d $ceos_dir) {
    print "creating output directory for CEOS data: $ceos_dir\n";
    $exit = system("mkdir $ceos_dir");
    $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $out_dir\n"
  }
  execute("unzip -o -d $ceos_dir $zip", $log);
  $i = $i + 1;
}  

sub execute{
  my ($command, $log) = @_;
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR : cannot open log file: $log\n";}
  LOG->autoflush;
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;
  $exit = system("$command 1>> $log 2>&1");
  $exit == 0 or die "ERROR $0: non-zero exit status $exit: $command\n"
}
