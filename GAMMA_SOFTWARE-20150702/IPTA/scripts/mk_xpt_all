#!/usr/bin/perl
use FileHandle;

if (($#ARGV + 1) < 6){die <<EOS ;}
*** IPTA script: $0
*** Copyright 2004, Gamma Remote Sensing, v1.0 17-Sep-2004 clw ***
*** evaluate peak position and peak values of SLC point scatterers  ***

usage: $0 <SLC_tab> <plist> <pmask> <pxpt> <ppos> <SLC_rec_num>
    SLC_tab	 (input) two column list of SLC and SLC parameter filenames (including paths) (text)
    plist	 (input) point list (enter - for none) (int)
    pmask	 (input) point data stack of mask values (uchar, set to - to accept all points)
    pxpt         (output) point data stack of interpolated SLC values (fcomplex or scomplex)    
    ppos         (output) point data stack of interpolated point target positions (fcomplex) 
    SLC_rec_num  record number in the output point data stack (starting with 1, default: - for all)  
EOS

print "evaluate peak position and peak values of SLC point scatterers $time\n";
open(SLC_TAB, "<$ARGV[0]") or die "ERROR $0: SLC_tab of scene SLC files does not exist: $ARGV[0]\n";
print "SLC_tab list of input SLCs and SLC parameters: $ARGV[0]\n"; 

$pt	  = $ARGV[1];
$pmask    = $ARGV[2];
$pxpt     = $ARGV[3];
$ppos     = $ARGV[4];

(-e "$pxpt") and system("rm -f $pxpt");	#if the pxpt data stack already exists, erase it
(-e "$ppos") and system("rm -f $ppos");	#if the ppos data stack already exists, erase it

$rec = $ARGV[5];
($rec =~ /\d+$/ and ($rec > 0)) or $rec eq "-" or die "ERROR $0: invalid record number: $rec\n";

$log = "mk_xpt_all.log";
open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
LOG->autoflush;  
$time = localtime;
print LOG "$0  @ARGV\n";
print LOG "start: $time  log file: $log  SLC_tab: $ARGV[0]\n";
print "start: $time  log file: $log  SLC_tab: $ARGV[0]\n\n";
system "npt $pt";

$rn = 0;
LINE: while (<SLC_TAB>) {
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in orbs list
  next LINE if /^#/; 		#skip comments in orbs list
  $time = localtime;
  $rn++;
  next LINE if (($rec ne "-") && ($rec != $rn));	#go to next line of specific record number and it does not match 
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  $rslc = @fields[0];
  $rslc_par = @fields[1];
  print LOG "\n*** $rslc  record: $rn  time: $time ***\n"; 
  print     "\n*** $rslc  record: $rn  time: $time ***\n"; 
  @format = extract_param($rslc_par,"image_format:");   #determine image format
  if (@format[1] eq "FCOMPLEX"){
   $type = 0;
  }
  elsif (@format[1] eq "SCOMPLEX"){
    $type = 1;
  }  
  else{ 
    die "ERROR $0: input SLC is not fcomplex or scomplex format: @format[1]\n";
  }
  execute("xpt_slc $rslc $rslc_par $pt $pmask $pxpt $ppos $rn $type",$log);
}

$time = localtime;
print "\nprocessing end: $time\n";
print LOG "\nprocessing end: $time\n";
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}
