#!/usr/bin/perl
use FileHandle;

$npoly = 3;	#number of parameters in the offset polynomial
$rlks = "-";
$azlks = "-";
$rpos = "-";
$azpos = "-";
$rflag = 0;
$cflag = 1;	#copy initial offsets into the offset polynomial when running init_offset
$thres0 = 7.0;	#threshold for accepting initial offset

if (($#ARGV + 1) < 6){die <<EOS ;}
*** $0
*** Copyright 2012, Gamma Remote Sensing, v3.6 30-Mar-2012 clw ***
*** Resample a set of SLCs to a common reference SLC, first polarization is used to measure offsets ***

usage: $0 <SLC_pol_tab> <ref_SLC> <ref_par> <rslc_dir> <RSLC_pol_tab> <mode> [rflag] [rlks] [azlks] [rpos] [azpos] [npoly]

    SLC_pol_tab   (input) 2n column list of SLC filenames and SLC parameter filenames (including paths)
                    first polarization is used as master, remaining polarization(s) are resampled the same
    ref_SLC       (input) reference SLC (including path)
    ref_par       (input) ISP image parameter file of the reference SLC (including path)
    rslc_dir      directory to receive the resampled SLCs and ISP image parameter files   
    RSLC_pol_tab  (output) RSLC_pol_tab file for the resampled SLC files
    mode          processing mode:
                    0: create offset parameter files    
                    1: estimate initial range and azimuth offsets using orbit state vectors
                    2: measure initial range and azimuth offsets using SLC images
                    3: estimate range and azimuth offset models using correlation of image intensities
	            4: resample SLC images using offset models
    rflag        flag for interative refinement of the resampled SLC:
                    0: resample and measure residual range and azimuth offsets  (no interation, default)
		    1: interatively improve range and azimuth offset polynomials then measure residual offsets
    rlks          number of range looks for initial offset estimation  (enter - for default)
    azlks         number of azimuth looks for initial offset estimation  (enter - for default)
    rpos          center of patch in range (samples) (enter - for default: image center)
    azpos         center of patch in azimuth (lines) (enter - for default: image center)
    npoly         number of polynomial parameters (1,3,4,6 default: $npoly)
   
EOS

open(SLC_POL_TAB, "<$ARGV[0]") or die "\nERROR $0: table of SLC images and parameter files does not exist: $ARGV[0]\n\n";
print "SLC_pol_tab table of SLC images and parameter files: $ARGV[0]\n"; 

$ref_slc1 = $ARGV[1];
$ref_par1 = $ARGV[2];
$rslc_dir = $ARGV[3];
$rslc_pol_tab = $ARGV[4];
$mode = $ARGV[5];

if($#ARGV >= 6){$rflag = $ARGV[6];}
if($#ARGV >= 7){$rlks = $ARGV[7];}
if($#ARGV >= 8){$azlks = $ARGV[8];}
if($#ARGV >= 9){$rpos = $ARGV[9];}
if($#ARGV >= 10){$azpos = $ARGV[10];}
if($#ARGV >= 11){$npoly = $ARGV[11];}

($mode == 0 || $mode == 1 || $mode == 2 || $mode == 3 || $mode == 4) or die "\nERROR $0: invalid mode for script: $mode\n\n";
($npoly == 1 || $npoly == 3 || $npoly == 4 || $npoly == 6) or die "\nERROR $0: invalid value for $npoly: $npoly\n\n";

-e $ref_slc1 or die "\nERROR $0: reference SLC does not exist: $ref_slc1\n";
-e $ref_par1 or die "\nERROR $0: ISP image parameter file of the reference SLC does not exist: $ref_par1\n";

unless (-d $rslc_dir){
  print "creating resampled SLC directory: $rslc_dir\n";
  (mkdir $rslc_dir) or die "ERROR $0: non-zero exit status, could not create SLC data directory $rslc_dir\n";
}

$log = "$rslc_dir/SLC_resamp_all"."_$mode".".log"; 
open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";
LOG->autoflush;  
    
$time = localtime;
print LOG "$0 @ARGV\n\n";
print LOG "*** $0 processing start: $time ***\n";
print "*** $0 processing start: $time ***\n";
print "log file: $log\n";

@width = extract_param($ref_par1,"range_samples:");
@lines = extract_param($ref_par1,"azimuth_lines:"); 

if ($rlks eq "-"){$rlks= int $width[1]/2048;}
if ($rlks <= 0){$rlks = 1;}

if ($azlks eq "-"){$azlks = int $lines[1]/2048;}
if ($azlks <= 0){$azlks = 1;}

if($rpos eq "-"){$rpos = $width[1]/2;}
if($azpos eq "-"){$azpos = $lines[1]/2;}

$ref_slc1 =~/\/*(.*\/)*(.*$)/; 	#match slash * times, match characters followed by slash 0 or times, match to end of line 
@tok = split /\./, $2;		#take part of filename up to the first ., if present, otherwise, the whole string
$ref_id = $tok[0];
#print "reference slc id: $ref_id\n";

$ref_slc = "$rslc_dir/$tok[0].rslc";
$ref_par = "$rslc_dir/$tok[0].rslc.par";

unless (-e $ref_slc){		#copy reference slc and slc parameter file
  execute("cp $ref_slc1 $ref_slc",$log);
}
  
unless (-e $ref_par){
  execute("cp $ref_par1 $ref_par",$log);
}

$time = localtime;
print LOG "initial offset looks range: $rlks  azimuth: $azlks\n";
print LOG "resampled rslc data directory:$rslc_dir\n";
print LOG "reference SLC:                $ref_slc\n";
print LOG "reference SLC range samples: $width[1]  azimuth lines: $lines[1]\n";
print LOG "reference SLC parameters:     $ref_par\n";
print LOG "output RSLC_pol_tab file:         $rslc_pol_tab\n";
($rflag == 0) or print "measuring offsets with respect to the resampled SLC\n";

print "initial offset looks range: $rlks  azimuth: $azlks\n";
print "resampled rslc data directory:$rslc_dir\n";
print "reference SLC:                $ref_slc\n";
print "reference SLC range samples: $width[1]  azimuth lines: $lines[1]\n";
print "reference SLC parameters:     $ref_par\n";
print "output RSLC_pol_tab file:         $rslc_pol_tab\n";
($rflag == 0) or print "rflag=1: measuring offsets relative to the resampled SLC to improve the offset model\n";

open(OFFINP, ">create_offset.in") or die "ERROR $0: cannot create file with inputs to create_offset: create_offset.in\n\n";
print OFFINP "offset parameters\n0 0\n32 32\n64 128\n7.0\n0\n".$width[1]."\n";
close OFFINP;

if ($mode == 0 || $mode == 1 || $mode == 2){
  LINE: while (<SLC_POL_TAB>) {	#read lines of processing list file
    $time = localtime;
    chomp $_;			#remove new line from record
    next LINE if /^$/; 		#skip blank lines in processing list
    next LINE if /^#/; 		#skip comments in processing list
    @fields = split;		#extract the scene identifier and other parameters on the line if present
  
    $slc2 = $fields[0];
    $slc2_par = $fields[1];
    -e $slc2_par or die "ERROR $0: ISP image parameter file does not exist for slc2: $slc2_par\n";
    -e $slc2 or die "ERROR $0: slc2 image file does not exist: $slc2\n";     
    @width2 = extract_param($slc2_par,"range_samples:");
    @lines2 = extract_param($slc2_par,"azimuth_lines:"); 

    $slc2 =~/\/*(.*\/)*(.*$)/; 	#match slash * times, match characters followed by slash 0 or times, match to end of line 
    @tok = split /\./, $2;	#take part of filename up to the first ., if present, otherwise, the whole string
    $rslc = "$rslc_dir/$tok[0].rslc";
    $rslc_par = "$rslc_dir/$tok[0].rslc.par";
    $slc2_id = $tok[0];

    if($ref_id eq $slc2_id){next;}	#in the case of the reference scene, jump to next scene
    print "\n*** ref. SLC: $ref_slc   SLC-2: $slc2   start time: $time ***\n";  
    $id = $ref_id."_".$slc2_id;
    $off = "$rslc_dir/$id.off";
 
    print LOG "\n*** ref. SLC: $ref_slc   SLC-2: $slc2   start time: $time ***\n";  
    print LOG "initial offset looks range: $rlks  azimuth: $azlks\n";
    print LOG "resampled RSLC data directory: $rslc_dir\n";
    print LOG "reference SLC:                $ref_slc\n";
    print LOG "reference SLC parameters:     $ref_par\n";
    print LOG "output RSLC_pol_tab file:         $rslc_pol_tab\n";
    ($rflag == 0) or print LOG "NOTE: checking measured offsets with respect to the resampled SLC\n";
    print LOG "ISP SLC-2 parameter file: $slc2_par\n";
    print LOG "ISP SLC-2: $slc2\n";
    print LOG "ISP offset parameter file: $off\n";
    print LOG "SLC-2 range samples: $width2[1]  azimuth lines: $lines2[1]\n";
    print "SLC-2 range samples: $width2[1]  azimuth lines: $lines2[1]\n";
   
    print "\n";
    if ($mode == 0){
      $exit = system("rm -f $off");
      $exit == 0 or die "ERROR $0: non-zero exit status: rm -f $off\n";
      execute("create_offset $ref_par $slc2_par $off < create_offset.in",$log);
      print "\n";
    }   
    
    if ($mode == 1){
      printf "orbit-derived initial range and azimuth offsets:\n";
      execute("init_offset_orbit $ref_par $slc2_par $off",$log);
      @roff1 = extract_param($off ,"initial_range_offset:");
      @azoff1 = extract_param($off ,"initial_azimuth_offset:");
      print "initial range offset:   $roff1[1]\n";
      print "initial azimuth offset: $azoff1[1]\n";
    }
    
    if ($mode == 2){
      print "SLC-derived initial range and azimuth offsets:\n";
      print LOG "initial offset looks  range: $rlks  azimuth: $azlks\n";
      print LOG "initial offset position  range: $rpos  azimuth: $azpos\n";
      print LOG "initial offset SNR threshold; $thres0  copy offset flag: $cflag\n";
      execute("init_offset $ref_slc $slc2 $ref_par $slc2_par $off $rlks $azlks $rpos $azpos - - $thres0 512 512 $cflag",$log);
      if ($cflag == 0){
        @roff1 = extract_param($off ,"initial_range_offset:");
        @azoff1 = extract_param($off ,"initial_azimuth_offset:");
        print "initial range offset:   $roff1[1]\n";
        print "initial azimuth offset: $azoff1[1]\n";
      }
      else{
        @rpoly1 = extract_param($off ,"range_offset_polynomial:");
        @azpoly1 = extract_param($off ,"azimuth_offset_polynomial:");
        print "@rpoly1\n";
        print "@azpoly1\n";
      }
    }
  }

  $time = localtime;
  print "\n*** $0 COMPLETED: $time ***\n";
  print LOG "\n*** $0 COMPLETED: $time***\n";
  exit 0;
}

$time = localtime;

seek SLC_POL_TAB, 0, 0;		#rewind the file to the beginning

    $line_count = 0;

LINE: while (<SLC_POL_TAB>) {	#read lines of processing list file
  $time = localtime;
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  $line_count++;

  POL: for($i = 0; $i < @fields; $i += 2) {   #repeat for all polarizations

      $slc2 = $fields[$i+0];
      $slc2_par = $fields[$i+1];
      -e $slc2_par or die "ERROR $0: ISP image parameter file does not exist for SLC-2: $slc2_par\n";
      -e $slc2 or die "ERROR $0: SLC-2 image file does not exist: $slc2\n";     

      $slc2 =~/\/*(.*\/)*(.*$)/; 		#match slash * times, match characters followed by slash 0 or times, match to end of line 
      @tok = split /\./, $2;		#take part of filename up to the first ., if present, otherwise, the whole string
      $rslc = "$rslc_dir/$tok[0].rslc";
  $rslc_par = "$rslc_dir/$tok[0].rslc.par";
  $slc2_id = $tok[0];

  $id = $ref_id."_".$slc2_id;
			  
  $off = "$rslc_dir/$id.off" if ($i==0); # use offset file from the first polarization for all

  $offs = "$rslc_dir/$id.offs";			#binary offsets
  $coffs = "$rslc_dir/$id.coffs";		#culled offsets
  $snr = "$rslc_dir/$id.snr";

  print "\n*** ref. SLC: $ref_slc   SLC-2: $slc2   START: $time ***\n";  
  print "initial offset looks range: $rlks  azimuth: $azlks\n";
  print "resampled rslc data directory: $rslc_dir\n";
  print "reference SLC:                $ref_slc\n";
  print "reference SLC parameters:     $ref_par\n";
  print "output RSLC_pol_tab file:         $rslc_pol_tab\n";
  ($rflag == 0) or print "measuring offsets with respect to the resampled SLC\n";
  print "ISP SLC-2 parameter file: $slc2_par\n";
  print "ISP SLC-2: $slc2\n";
  print "ISP offset parameter file: $off\n\n";
  print "ref SLC: $ref  SLC-2: $id  start time: $time\n";  
  print "ISP SLC-2 parameter file: $slc2_par\n";
  print "ISP SLC-2: $slc2\n";
  print "ISP offset parameter file: $off\n\n";
 
  $log = "$rslc_dir/".$id."_resamp.log"; 
  open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";
  LOG->autoflush;  
  print LOG "\n*** ref. SLC: $ref_slc   SLC-2: $slc2   START: $time ***\n";  
  print LOG "initial offset looks range: $rlks  azimuth: $azlks\n";
  print LOG "resampled rslc data directory: $rslc_dir\n";
  print LOG "reference SLC:                $ref_slc\n";
  print LOG "reference SLC parameters:     $ref_par\n";
  print LOG "output RSLC_pol_tab file:         $rslc_pol_tab\n";
  ($rflag == 0) or print LOG "measuring offsets with respect to the resampled SLC\n";
  print LOG "ISP SLC-2 parameter file: $slc2_par\n";
  print LOG "ISP SLC-2: $slc2\n";
  print LOG "ISP offset parameter file: $off\n\n";
  print LOG "ref SLC: $ref  SLC-2: $id  start time: $time\n";  
  print LOG "ISP SLC-2 parameter file: $slc2_par\n";
  print LOG "ISP SLC-2: $slc2\n";
  print LOG "ISP offset parameter file: $off\n\n";
  close LOG;		

  if(($ref_id eq $slc2_id)||($line_count==1)){ #in the case of the reference scene copy the files
      unless (-e $rslc){
	  print "\n Copy slc: $slc2\n";
	  execute("cp $slc2 $rslc",$log);
      } else {
	  print "SLC exists: $rslc\n";
      }
      unless (-e $rslc_par){
	  print "\n Copy par: $rslc_par\n";
	  execute("cp $slc2_par $rslc_par",$log);
      } else {
	  print "PAR exists: $rslc_par\n";
      }
      next POL;
  }	
 
  if($mode == 3){
    execute("offset_pwr $ref_slc $slc2 $ref_par $slc2_par $off $offs $snr",$log);
    execute("offset_fit $offs $snr $off $coffs - - $npoly",$log);
    last POL;
  }
  
  if($mode == 4){
    execute("SLC_interp $slc2 $ref_par $slc2_par $off $rslc $rslc_par",$log);
    $off2 = "$rslc_dir/$id"."_2.off";
    $offs2 = "$rslc_dir/$id"."_2.offs";		#binary offsets
    $coffs2 = "$rslc_dir/$id"."_2.coffs";	#culled offsets
    $snr2 = "$rslc_dir/$id"."_2.snr";

    execute("create_offset $ref_par $rslc_par $off2 < create_offset.in",$log); print "\n";
    execute("offset_pwr $ref_slc $rslc $ref_par $rslc_par $off2 $offs2 $snr2",$log);
    execute("offset_fit $offs2 $snr2 $off2 $coffs2 - - $npoly",$log);
  
    @rpoly =  extract_param($off,"range_offset_polynomial:"); 
    @azpoly = extract_param($off,"azimuth_offset_polynomial:");
  
    @rpoly2 =  extract_param($off2,"range_offset_polynomial:"); 
    @azpoly2 = extract_param($off2,"azimuth_offset_polynomial:");  
    printf "residual offset polynomials 1:\n";
    print "\n@rpoly2\n";
    print "@azpoly2\n\n";
  
    open(LOG,">>${log}") or die "\nERROR $0: cannot open log file: $log\n";
    printf LOG "residual offset polynomials 1:\n";
    print LOG "\n@rpoly2\n";
    print LOG "@azpoly2\n\n";
   
    if($rflag == 1){
      for($j = 1; $j <= 4; $j += 1){
        $rpoly3[$j] = $rpoly[$j] + $rpoly2[$j];
        $azpoly3[$j] = $azpoly[$j] + $azpoly2[$j];
      }
      $sv1 = sprintf "%14.7e %12.5e %12.5e %12.5e",$rpoly3[1], $rpoly3[2], $rpoly3[3], $rpoly3[4]; 
      $sv2 = sprintf "%14.7e %12.5e %12.5e %12.5e",$azpoly3[1], $azpoly3[2], $azpoly3[3], $azpoly3[4]; 
  
      execute("set_value $off $off \"range_offset_polynomial\"  \"$sv1\"",$log);
      execute("set_value $off $off \"azimuth_offset_polynomial\" \"$sv2\"",$log);
      execute("SLC_interp $slc2 $ref_par $slc2_par $off $rslc $rslc_par",$log);
      execute("offset_pwr $ref_slc $rslc $ref_par $rslc_par $off2 $offs2 $snr2",$log);
      execute("offset_fit $offs2 $snr2 $off2 $coffs2 - - $npoly",$log);  

      @rpoly2 = extract_param($off2,"range_offset_polynomial:"); 
      @azpoly2 = extract_param($off2,"azimuth_offset_polynomial:");  

      printf "residual offset polynomials 2:\n";
      print "\n@rpoly2\n";
      print "@azpoly2\n\n";

      open(LOG,">>${log}") or die "\nERROR $0: cannot open log file: $log\n";
      printf LOG "residual offset polynomials 2:\n";
      print LOG "\n@rpoly2\n";
      print LOG "@azpoly2\n\n";      
    }
  }
  
  $time = localtime;
  open(LOG,">>${log}") or die "\nERROR $0: cannot open log file: $log\n";
  print LOG "*** ref. SLC: $ref_slc   SLC-2: $slc2  END: $time ***\n";  
  print "*** ref. SLC: $ref_slc   SLC-2: $slc2  END: $time ***\n";  
		      }
  } 

# create output RSLC_pol_tab file
if ($mode == 4){
  system("rm -f $offs $offs2 $coffs $coffs2 $snr $snr2");  
  system("/bin/ls -1 $rslc_dir/*HH.rslc > q1");
  system("/bin/ls -1 $rslc_dir/*HH.rslc.par > q2");
  system("/bin/ls -1 $rslc_dir/*HV.rslc > q3");
  system("/bin/ls -1 $rslc_dir/*HV.rslc.par > q4");
  system("/bin/ls -1 $rslc_dir/*VH.rslc > q5");
  system("/bin/ls -1 $rslc_dir/*VH.rslc.par > q6");
  system("/bin/ls -1 $rslc_dir/*VV.rslc > q7");
  system("/bin/ls -1 $rslc_dir/*VV.rslc.par > q8");

  system("paste q1 q2 q3 q4 q5 q6 q7 q8 > $rslc_pol_tab");
  system("rm -f q1 q2 q3 q4 q5 q6 q7 q8"); 
}

$time = localtime;
print "\n*** $0 MODE: $mode COMPLETED: $time ***\n";
print LOG "\n*** $0 MODE: $mode COMPLETED: $time***\n";
exit 0;

# execute updated to match mk_mli_all
#     better error messages for new vs existing log file
#     close log file before system to log program execution
sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "\nERROR $0: cannot open existing log file: $log\n";}
  else {open(LOG,">$log") or die "\nERROR $0: cannot open new log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "\nERROR extract_param: cannot open parameter file: $infile\n";
  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "\nERROR $0: keyword $keyword not found in file: $infile\n";
}
