#!/usr/bin/perl
use FileHandle;
$prf = "-";

if (($#ARGV + 1) < 6){die <<EOS;}
*** $0
*** Copyright 2011, Gamma Remote Sensing, v1.2 25-Mar-2011 clw ***
*** ALOS PALSAR WB ScanSAR raw data pre-processing and parameter setup ***

usage: $0 <CEOS_list> <PALSAR_ANT> <out_dir> <log> <proc_list> <mode> [PRF] [keyword] [value]
    CEOS_list	(input) parameter file with 4 entries/line 
                  1. PALSAR CEOS leader file (included path as necessary)   
                  2. PALSAR CEOS raw SAR data file (included path as necessary)
                  3. unique scene identifier (date format: 20060610)
    PALSAR_ANT  PALSAR antenna pattern file provided by JAXA (e.g. palsar_ant_20061024.dat)
    out_dir     directory for output raw data files, MSP processing parameter and sensor parameter files. 
    log         (output) processing log file  
    proc_list   (output) (processing list for use by PALSAR_proc_all)
    mode        processing mode:
                  1: create MSP processing parameter files and reformat raw data 
                  2: estimate Doppler centroid (optional)
                  3: set value in the processing parameter files for a keyword:value pair
                  4: generate processing list for use by PALSAR_proc_all
    PRF         pulse repetition frequency for output data (enter - for default PRF from Beam 4)
    keyword 	keyword in the MSP processing parameter file (example: doppler_polynomial)
    value	new value delimited by double quotes (example: "317.0 0. 0. 0.")
       
EOS

open(SLIST, "<$ARGV[0]") or die "ERROR $0: CEOS list does not exist: $ARGV[0]\n";

$PALSAR_ANT = $ARGV[1];
(-e $PALSAR_ANT) or die "ERROR $0: PALSAR antenna pattern data file does not exist: $PALSAR_ANT";

$out_dir = $ARGV[2];
unless (-d $out_dir) {
  print "creating output directory for fixed raw data and MSP processing parameter files: $out_dir\n";
  $exit = system("mkdir $out_dir");
  $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $out_dir\n"
}

$log = "$ARGV[3]";
open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
print LOG "$0 @ARGV\n\n";	#print command line that was used
print "PALSAR_pre_proc_WB log file: $log\n";

$mode = $ARGV[5];
if(($mode != 1) && ($mode != 2) && ($mode != 3) && ($mode != 4)){
  die "ERROR $0: invalid PALSAR_pre_proc_WB processing mode: $mode\n";
}

if (($mode == 1) && (($#ARGV + 1) >= 6)) {	#read PRF 
  $prf = $ARGV[6];
}

$time = localtime;
print "PROCESSING START: $time\n";
print "CEOS list: $ARGV[0]\n";
print "antenna pattern data file: $PALSAR_ANT\n";
print "output directory: $out_dir\n";
print "PRF used for resampling data: $prf\n";

print LOG "PROCESSING START: $time\n";
print LOG "CEOS list: $ARGV[0]\n";
print LOG "antenna pattern data file: $PALSAR_ANT\n";;
print LOG "output directory: $out_dir\n\n";
print LOG "PRF used for resampling data: $prf\n";
close LOG;

if ($mode == 3){
  print "number of arguments+1)",($#ARGV + 1);
  if ($#ARGV != 8) {die "ERROR $0: mode 3 keyword value pair are missing from the command line\n";}
  $key =  $ARGV[7];
  $value = $ARGV[8];
  print "updating value in the MSP processing parameter files\n";
  print "keyword: $key   new value: $value\n";
} 

if ($mode == 4){
  $proc_list = $ARGV[4];
  print "output processing list file: $proc_list\n";
  open(PROCF,">$proc_list") or die "ERROR $0: cannot open output processing list file: $proc_list\n";
}

LINE: while (<SLIST>) {		#read list of directories with unreformated raw data
  chomp $_;
  next LINE if /^$/; 		#skip blank lines in input list
  next LINE if /^#/; 		#skip comments in the input list
  @fields = split;		#extract the identifier
  $ceos = $fields[0];
  $dat1 = $fields[1];
  $id = $fields[2];
  print "CEOS leader: $ceos   input CEOS raw data file: $dat1\n";
 
  foreach $beam (4,5,1,2,3) {
    print "\nbeam number: $beam\n";
    $ext = $id."_$beam";
    $ant_pat = "PALSAR_".$ext.".antpat";
    $proc_par = "$out_dir"."\/p".$ext.".slc.par";
    $sensor = "$out_dir"."\/".$ext.".sar_par";
    $raw = "$out_dir"."\/".$ext.".raw";
    $beam_id = 17 + $beam;	#Beam_ID in the antenna pattern file for WB ScanSAR data 

    print "MSP Processing parameter file: $proc_par\n";
    print "MSP Sensor parameter file: $sensor\n";
    print "antenna pattern: $ant_pat\n";
    print "antenna BEAM_ID: $beam_id\n";
    print "raw data: $raw\n\n";

    if ($mode == 1){
      execute("PALSAR_proc_WB $ceos $sensor $proc_par $dat1 $beam $raw $prf", $log);
      execute("PALSAR_antpat $sensor $proc_par $PALSAR_ANT $ant_pat $beam_id ", $log);
    }

    if ($mode == 2){
      print "CEOS leader: $ceos   PROC_par: $proc_par\n";
      $azsp ="$out_dir/$ext".".azsp";
      execute("azsp_IQ $sensor $proc_par $raw $azsp - - 36", $log);
    }

    if($mode == 3){
      print "PROC_par: $proc_par\n";
      (-e $proc_par) or die"ERROR $0: processing parameter file does not exist: $proc_par\n"; 
      execute("set_value $proc_par $proc_par $key \"$value\"", $log); 
    }

    if ($mode == 4){
      @dpoly = extract_param($proc_par, "doppler_polynomial:");
      $fd = $dpoly[1];
      $fdrate = $dpoly[2];
      if($beam == 4){
        printf PROCF  "$id - - - - %8.1f %12.4e 0.8\n", $fd, $fdrate;
        printf "$id - - - - %8.1f %12.4e 0.8\n", $fd, $fdrate;
      }
    }  
  }
} 

$time = localtime;
open(LOGF,">>$log") or die "ERROR $0: cannot open log file: $log\n";
print "\nPALSAR PRE-PROCESSING  mode $mode end: $time\n";
print LOGF "\nPALSAR PRE-PROCESSING mode $mode end: $time\n";
exit 0;

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR : cannot open log file: $log\n";} 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log 2>&1");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

