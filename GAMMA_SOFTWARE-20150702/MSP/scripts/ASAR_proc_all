#!/usr/bin/perl
use FileHandle;

$az_patch = 8192;		#default patch azimuth patch size
$autof_min = 5.0;

if (($#ARGV + 1) < 8){die <<EOS ;}
*** $0
*** Copyright 2014, Gamma Remote Sensing, v3.0 19-Jun-2014 clw ***
*** ASAR processing from RAW data ***

usage: $0 <proc_list> <RAW_dir> <rc_dir> <SLC_dir> <MLI_dir> <rlks> <azlks> <slc_format> [az_patch] [autof_min]
    proc_list	(input) processing list generated by ASAR_pre_proc or ASAR_proc_par (8 columns): 
    		    1. scene_identifier (example: 19960816)  
		    2. offset in echoes to start of processed data (enter - for default)
		    3. number of echoes to process (enter - for default)
		    4. range offset in samples (enter - for default)
		    5. number of range samples to process (enter - for default)
		    6. Doppler centroid for scene (Hz)
		    7. Doppler slope for scene (Hz/m)
		    8. azimuth processing bandwidth fraction
    RAW_dir	 data directory containing ASAR raw data files 
    rc_dir	 directory to temporarily store intermediate range compressed data (example: /tmp)
    SLC_dir	 directory to store output SLC data 
    MLI_dir	 directory to store multi-look intensity (MLI) files derived from the slc data
    rlks	 number of range looks to generate MLI images   (nominal: 1)
    azlks	 number of azimuth looks to generate MLI images (nominal: 5)
    slc_format	 desired output SLC image format (0: FCOMPLEX,  1: SCOMPLEX) 
    az_patch     azimuth patch size (default= $az_patch)
    autof_min    minimum SNR threshold for autofocus, 0.0 for no autofocus (default = $autof_min)

    NOTE: current directory is denoted by .
    
EOS

open(SLIST, "<$ARGV[0]") or die "ERROR $0: processing list does not exist: $ARGV[0]\n\n";
print "processing list: $ARGV[0]\n"; 

$raw_dir = $ARGV[1];
$rc_dir  = $ARGV[2];
$slc_dir = $ARGV[3];
$mli_dir = $ARGV[4];
$rlks    = $ARGV[5];
$azlks   = $ARGV[6];
$slc_format = $ARGV[7];

-d $raw_dir or die "ERROR $0: raw data directory does not exist: $raw_dir\n";
-d $rc_dir or die "ERROR $0: directory for temp storage of range compressed data does not exist: $rc_dir\n";

unless (-d $slc_dir) {
  print "creating slc directory: $slc_dir\n";
  $exit = system("mkdir $slc_dir");
  $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $slc_dir\n"
}
unless(-d $mli_dir) {
  print "creating mli directory: $mli_dir\n";
  $exit = system("mkdir $mli_dir");
  $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $slc_dir\n"
}
 
print "input raw data directory: $raw_dir\n";
print "directory for temp storage of range compressed data: $rc_dir\n";
print "output SLC data directory: $slc_dir\n";
print "output MLI data directory: $mli_dir\n";

($slc_format == 0 || $slc_format == 1) or die "ERROR $0: invalid slc format value: $ARGV[4]\n";
if($slc_format == 0){print "SLC image format: fcomplex\n";}
else {print "SLC image format: scomplex\n";}

$rlks =~ /\d+$/ && $rlks > 0 or die "ERROR $0: invalid number of range looks: $rlks\n";
$azlks =~ /\d+$/ && $azlks > 0 or die "ERROR $0: invalid number of azimuth looks: $azlks\n";
print "MLI range looks: $rlks  azimuth looks: $azlks\n";

if ($#ARGV >= 8){
  $ARGV[8] =~ /\d+$/ or die "ERROR $0: invalid entry for azimuth patch size: $ARGV[8]\n";
  $az_patch = $ARGV[8];   
}
print "azimuth patch size (lines): $az_patch\n";

if ($#ARGV >= 9){
  $ARGV[9] =~ /\d+$/ or die "ERROR $0: invalid entry for autofocus minimum: $ARGV[9]\n";
  $autof_min = $ARGV[9]; 
  $autof_min >= 0.0 or die "ERROR $0: invalid entry for autofocus minimum threshold: $autof_min)\n";
  print "autofocus minimum SNR: $autof_min\n";  
}

print "\n";
LINE: while (<SLIST>) {		#read lines of processing list file
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier, sensor parameter file, and other parameters
  $#fields + 1 >= 8 or die "ERROR $0: insuffient number of columns in proc_list: $_\n";	#check if enough entries

  $id = $fields[0];
  $log = $slc_dir."/".$id."_MSP.log";			#concatenate strings with . 
  $time = localtime;
  print "*** scene id: $id  processing log file: $log  start time: $time ***\n";
  open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
  LOG->autoflush;

  print LOG "*** scene id: $id  processing log file: $log  start time: $time ***\n";  
  $proc_par = "$raw_dir"."\/p$id.slc.par";		#create processing parameter file name
  -e "$proc_par" or die "ERROR $0: MSP processing parameter file does not exist: $proc_par\n";
  @title = extract_param($proc_par,"title:");
  $sensor = "$raw_dir"."\/$title[2]";
 
  -e $sensor or die "ERROR $0: MSP sensor parameter file does not exist: $sensor\n";
  print "MSP sensor parameter file:     $sensor\n";
  print "MSP processing parameter file: $proc_par\n";
  print LOG "MSP sensor parameter file:     $sensor\n";
  print LOG "MSP processing parameter file: $proc_par\n";
    
  @ant_pattern = extract_param($sensor, "antenna_pattern_filename:");	#check if antenna pattern exists
  $antpat = $ant_pattern[1];
  -e "$antpat" or die "ERROR $0: antenna pattern file does not exist: $antpat\n";
  
  $raw = "$raw_dir/$id.raw";   		#check if raw data file exists
  -e "$raw" or die "ERROR $0: ASAR raw data file does not exist: $raw\n";
  $azsp = "$id.azsp";
  $rspec = "$id.rspec";
  $rc = "$rc_dir/$id.rc";
  $slc = "$slc_dir/$id.slc";
  $mli = "$mli_dir/$id.mli";
  $proc_mli_par = "$mli_dir/p$id.mli.par";
  $isp_slc_par = "$slc_dir/$id.slc.par";
  $isp_mli_par = "$mli_dir/$id.mli.par";
  $autof_snr = 10.0;
  $slc_type = 0;	#sigma0
  $k_beta = 2.12;	#Kaiser window beta parameter (1.0 = -20 db sidelobes, 2.12 = -30 dB sidelobes)
  
  @sensor_name = extract_param($sensor,"sensor_name:");
  @date = extract_param($proc_par, "date:");
  $cal_fact = -31.0;
  if($slc_format == 1){$cal_fact += 60.0;}
  
  print LOG "calibration factor (dB): $cal_fact\n";
  print LOG "antenna pattern: $antpat\n";
  print LOG "minimum autofocus SNR: $autof_snr\n";
  print LOG "azimuth Kaiser window beta: $k_beta\n";
  print LOG "raw data file:         $raw\n";
  print LOG "range spectrum file:   $rspec\n";
  print LOG "azimuth spectrum file: $azsp\n";
  print LOG "SLC output image:      $slc\n";
  print LOG "MSP mli proc file:     $proc_mli_par\n";
  print LOG "MLI output image:      $mli\n\n";
  close LOG;	
  
# column entries must be valid numbers or -
  $fields[1] =~ /\d+$|-$/ or die "ERROR $0: invalid offset to first echo to process: $fields[1]\n";
  $fields[2] =~ /\d+$|-$/ or die "ERROR $0: invalid number of lines to process: $fields[2]\n";
  $fields[3] =~ /\d+$|-$/ or die "ERROR $0: invalid range sample offset: $fields[3]\n";
  $fields[4] =~ /\d+$|-$/ or die "ERROR $0: invalid number of range samples: $fields[4]\n";

  $fields[1] =~ /-/ or execute("set_value $proc_par $proc_par offset_to_first_echo_to_process $fields[1]",$log);  
  $fields[2] =~ /-/ or execute("set_value $proc_par $proc_par echoes_to_process $fields[2]",$log);
  $fields[3] =~ /-/ or execute("set_value $proc_par $proc_par range_offset $fields[3]",$log);
  $fields[4] =~ /-/ or execute("set_value $proc_par $proc_par raw_range_samples $fields[4]",$log);
  @dop = extract_param($proc_par,"doppler_polynomial:");

  if( $fields[5] ne "-"){$dop[1] = sprintf "%10.3f", $fields[5];}   
  if( $fields[6] ne "-"){$dop[2] = sprintf "%12.5e", $fields[6];}
  execute("set_value $proc_par $proc_par doppler_polynomial \"$dop[1] $dop[2]  $dop[3]  $dop[4]\" ",$log);

  if( $fields[7] ne "-"){
    ($fields[7] >= 0.3 && $fields[7] <= 1.0) or die "ERROR $0: invalud processing azimuth bandwidth fraction: $fields[7]\n";
    execute("set_value $proc_par $proc_par azimuth_bandwidth_fraction $fields[7]",$log);
  }   
#  execute("rspec_IQ $sensor $proc_par $raw $rspec",$log);
#  execute("azsp_IQ $sensor $proc_par $raw $azsp",$log);
#  execute("set_value $proc_par $proc_par doppler_polynomial \"317.0 0 0 0\"",$log);

  execute("pre_rc $sensor $proc_par $raw $rc",$log);
  execute("az_proc $sensor $proc_par $rc $slc $az_patch $slc_format $cal_fact $slc_type $k_beta",$log);

  if($autof_min > 0.0){
    execute("af $sensor $proc_par $slc - - - - $autof_snr", $log);
    execute("az_proc $sensor $proc_par $rc $slc $az_patch $slc_format $cal_fact $slc_type $k_beta",$log);
    execute("af $sensor $proc_par $slc - - - - $autof_snr", $log);
  }

  execute("multi_SLC $proc_par $proc_mli_par $slc $mli $rlks $azlks",$log);
  @width = extract_param($proc_mli_par, "range_pixels:");       #width of MLI image
  execute("raspwr $mli $width[1] 1 0 1 1 1 $mli.bmp",$log);
  execute("par_MSP $sensor $proc_par $isp_slc_par",$log);	#create ISP image parameter files 
  execute("par_MSP $sensor $proc_mli_par $isp_mli_par",$log);

  open(LOG,">>${log}") or die "ERROR $0: cannot open log file: $log\n\n";
  $time = localtime;
  print "\nprocessing end: $time\n\n";
  print LOG "\nprocessing end: $time\n\n";
  close LOG;
  if (-e $rc) {
    unlink $rc;
  }
} 
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR : cannot open log file: $log\n";} 
  LOG->autoflush;
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}

