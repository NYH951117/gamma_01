#!/usr/bin/perl
use FileHandle;

$pwr_min = .5;
$mode = 2;
$msr_cal = 1.5;
$pwr_cal = 1.0;
$num_msr = 8;
$dmsr = .1;
$msr_min = 1.2;

if (($#ARGV + 1) < 5){die <<EOS ;}
*** IPTA script: $0
*** Copyright 2004, Gamma Remote Sensing, v1.7 21-Oct-2004 clw ***
*** generate a set of pt target lists with different thresholds  ***

usage: $0 <SLC_tab> <SLC_par> <MLI_par> <MLI_ras> <MSR_dir> [PWR_min] [mode] [MSR_cal] [PWR_cal] [min_MSR] [num_MSR] [delta_MSR]
    SLC_tab     (input) two column list of coregistered SLC files and associated SLC parameter files (including paths, text)
    SLC_par     (input) reference resampled SLC image parameter file (text)
    MLI_par     (input) image parameter file of reference resampled MLI image (text)
    MLI_ras     (input) background reference resampled MLI image (SUN raster or BMP format)
    MSR_dir     directory to contain mean/sigma ratio images, point lists, and point images
    PWR_min     minimum relative intensity threshold for point target selection (default = $pwr_min)
    mode        intensity normalization between SLC scenes (0:none  1:image average  default=2:point targets)
    MSR_cal     mode 2 mean/sigma ratio for point target selection for relative cal. between scenes (default = $msr_cal)
    PWR_cal     mode 2 intensity threshold ratio for point target selection for relative cal. between scenes (default = $pwr_cal)
    min_MSR	initial mean/sigma ratio threshold for point selection (default = $msr_min)
    num_MSR     number of MSR thresholds to test (default = $num_msr)
    delta_MSR	increment of MSR threshold (default = $dmsr)
     
    The current directory is denoted using . 
       
EOS

open(SLC_TAB, "<$ARGV[0]") or die "\nERROR $0: table SLC images and parameter files: $ARGV[0]\n";
print "SLC_tab table SLC images and parameter files: $ARGV[0]\n"; 
$slc_tab = $ARGV[0];
$rslc_par = $ARGV[1];
$rmli_par = $ARGV[2];
$rmli_ras = $ARGV[3];
$msr_dir  = $ARGV[4];

if($#ARGV >= 5){$pwr_min = $ARGV[5];}
if($#ARGV >= 6){$mode    = $ARGV[6];}
if($#ARGV >= 7){$msr_cal = $ARGV[7];}
if($#ARGV >= 8){$pwr_cal = $ARGV[8];}
if($#ARGV >= 9){$msr_min = $ARGV[9];}
if($#ARGV >= 10){$num_msr = $ARGV[10];}
if($#ARGV >= 11){$dmsr = $ARGV[11];}

-e $rslc_par or die "ERROR $0: reference rslc image parameter file does not exist: $rslc_par\n";
-e $rmli_par or die "ERROR $0: reference rmli image parameter file does not exist: $rmli_par\n";
-e $rmli_ras or die "ERROR $0: background rmli Sun raster or bmp format image does not exist: $rmli_ras\n";

unless (-d $msr_dir) {
  $exit = system("mkdir $msr_dir");
  $exit == 0 or die "ERROR $0: non-zero exit status: mkdir $msr_dir\n"
}

$log = "$msr_dir/mk_msr_pt.log";				#concatenate strings with .  
open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
LOG->autoflush;  

@format = extract_param($rslc_par,"image_format:");	#determine image format
if (@format[1] eq "FCOMPLEX"){
  $type = 0;
}
elsif (@format[1] eq "SCOMPLEX"){
  $type = 1;
}  
else{ 
  die "ERROR $0: input SLC image is not complex format: @format[1]\n";
}

@width = extract_param($rslc_par,"range_samples:");
-e $rmli_par or die "ERROR $0: $rmli_par does not exist in directory $rmli_dir\n";  
@width2 = extract_param($rmli_par,"range_samples:");
@rlks = extract_param($rmli_par,"range_looks:");
@azlks = extract_param($rmli_par,"azimuth_looks:");
$time = localtime;

print LOG "$0  @ARGV\n";
print LOG "start: $time  log file: $log\n\n";
print "start: $time  log file: $log\n\n";
print "SLC tab:                    $slc_tab\n";
print "ref SLC parameter file:     $rslc_par\n";
print "ref. MLI parameter file:    $rmli_par\n";
print "ref. MLI raster image:      $rmli_ras\n";
print "mean sigma directory:       $msr_dir\n";
print "reference SLC width:        @width[1]\n";
print "MLI image width:            @width2[1]\n";
print "MLI range looks: @rlks[1]  azimuth looks: @azlks[1]\n";

print LOG "SLC tab:                    $slc_tab\n";
print LOG "ref SLC parameter file:     $rslc_par\n";
print LOG "ref. MLI parameter file:    $rmli_par\n";
print LOG "ref. MLI raster image:      $rmli_ras\n";
print LOG "mean sigma directory:       $msr_dir\n";
print LOG "reference SLC width:        @width[1]\n";
print LOG "MLI image width:            @width2[1]\n";
print LOG "MLI range looks: @rlks[1]  azimuth looks: @azlks[1]\n";

if ($mode == 0){
  print "intensity normalization mode: none\n";
  print LOG "intensity normalization mode: none\n";
}
elsif ($mode == 1){
  print "intensity normalization mode: image average\n";
  print LOG "intensity normalization mode: image average\n";
}
elsif ($mode == 2){
  print "intensity normalization mode: point targets\n";
  print "mean/sigma ratio for cal. point target selection: $msr_cal\n";
  print "relative intensity threshold for cal. point target selection: $pwr_cal\n";
  print "initial mean/sigma ratio threshold for point selection: $msr_min\n";

  print LOG "intensity normalization mode: point targets\n";
  print LOG "mean/sigma ratio for cal. point target selection: $msr_cal\n";
  print LOG "relative intensity threshold for cal. point target selection: $pwr_cal\n"; 
  print LOG "initial mean/sigma ratio threshold for point selection: $msr_min\n";
}
else{ 
  die "ERROR $0: invalid intensity normalization mode: $mode\n";
} 

$pwrv = $pwr_min;

for($j=0; $j < $num_msr; $j++){
  $time = localtime;
  $msrv = $msr_min + $j*$dmsr;
  $msr_out = "$msr_dir/msr_$msrv";
  $pt = $msr_dir."\/pt_".$msrv;
  $ras_out = $pt.".ras";
  print LOG "\n*** MSR threshold: $msrv  PWR threshold: $pwrv  time: $time ***\n";
  print "\n*** MSR threshold: $msrv  PWR threshold: $pwrv  time: $time ***\n";
  print LOG "point list: $pt  msr: $msr_out  raster file: $ras_out\n";
  print "point list: $pt  msr: $msr_out  raster file: $ras_out\n";
  execute("pwr_stat $slc_tab $rslc_par $msr_out $pt $msrv $pwrv 0 0 - - $type $mode $msr_cal $pwr_cal",$log);
  execute("ras_pt $pt - $rmli_ras $ras_out @rlks[1] @azlks[1] 255 255 0",$log);
  system("npt $pt");
  execute("npt $pt",$log); 
}

$time = localtime;
print LOG "\n$0  @ARGV\n";
print LOG "\nprocessing completed: $time \n";
print "\n$0 processing completed: $time \n";
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n\n";
}
