#!/usr/bin/perl
use FileHandle;
use File::Basename;

$pixasarea = 0;

if (($#ARGV + 1) < 3){die <<EOS ;}
*** $0
*** Copyright 2012, Gamma Remote Sensing, v1.0 29-Aug-2012 clw ***
*** Convert Landsat tile (GEOTIFF) to Gamma format Image and DEM parameter file ***

usage: $0 <Landsat_geotif> <DEM> <DEM_par>
    Landsat_geotif   (input)  Landsat GEOTIFF file (*.tif)
    image            (output) image data float, 3 bands: image.b1, image.b2, image.b3
    DEM_par          (output) Gamma DEM parameter file

EOS

$landsat = $ARGV[0];
$image   = $ARGV[1];
$dem_par = $ARGV[2];
$dem_par_in = "dem_par.in";
$im_tmp= "im_tmp";

$im1 = $image.".b1";
$im2 = $image.".b2";
$im3 = $image.".b3";

my ($s1, $dir1, $ext1) = fileparse($landsat, qr/\.[^.]*/); #extension is the last bit after the last period
print "basename: $s1\n";
$log = "$s1"."_landsat.log";

print "Landsat image in GEOTIFF format: $landsat\n";
print "output images: $im1, $im2, $im3\n";
print "output DEM parameter file: $dem_par\n";
print "log file: $log\n";

$gdal_output = `gdalinfo $landsat`;
#print $gdal_output;

my @gdal = split /\n/, $gdal_output; #split into lines

foreach my $line (@gdal){
  if ($line =~ m/Size is/) {
    @a = split (/[\s+,]/, $line);	#parse line into tokens, splitting on whitespace or ,
    $xsize = $a[2];
    $ysize = $a[4];
    print "\nLandsat image samples across: $xsize   down: $ysize\n";
  }
  
  if ($line =~ m/PROJCS\["WGS 84 \//) {
    @a = split (/[\s+,"]/, $line);	#parse line into tokens, splitting on whitespace or ,
    $zone = substr $a[6], 0, -1;
    print "UTM zone: $zone\n";
  }
  
  if ($line =~ m/PARAMETER\["false_northing"/) {
    @a = split (/[,\]]/, $line);	#parse line into tokens, splitting on whitespace or ,
    $false_north = $a[1];
    print "UTM false northing: $false_north\n";
  }
  
  if ($line =~ m/Upper Left/) {
    @a = split (/[(),]/, $line);	#parse line into tokens, splitting on (),
    $east = $a[1];
    $north = $a[2];
    print "Upper Left corner northing (deg.): $north    easting (deg.): $east\n";
  }

  if ($line =~ m/Pixel Size/){
    @a = split (/[(),]/, $line);	#parse line into tokens, splitting on (),
    $pix_east = $a[1];
    $pix_north = $a[2];
    print "Pixel Size (deg.) northing: $pix_north    easting: $pix_east\n";
  }

  if ($line =~ /  AREA_OR_POINT=Area/){
    $pixasarea = 1;
  }
}

if ($pixasarea == 1){
  print "\n*** Pixel as Area! updating corner coordinates to pixel as point ***\n";
  $east = $east + $pix_east/2.0;
  $north = $north + $pix_north/2.0;
  print "updated pixel upper left northing (m): $north   easting (m): $east\n";
}

open(DPAR, "> $dem_par_in") or die "ERROR $0: cannot create file with inputs to create_dem_par: $dem_par_in\n\n";
print DPAR "UTM\nWGS84\n1\n$zone\n$false_north\n$s1\nREAL*4\n0.0\n1.0\n$xsize\n$ysize\n$pix_north $pix_east\n$north $east\n";
close(DPAR);

print "\n";
execute("rm -f $dem_par",$log);
execute("create_dem_par $dem_par < $dem_par_in",$log);
print "\n\n";

execute("gdal_translate -ot Float32 -of ENVI -b 1 $landsat $im_tmp",$log);
execute("swap_bytes $im_tmp $im1 4", $log);
execute("raspwr $im1 $xsize 1 0 1 1 1. 1.", $log);

execute("gdal_translate -ot Float32 -of ENVI -b 2 $landsat $im_tmp",$log);
execute("swap_bytes $im_tmp $im2 4", $log);
execute("raspwr $im2 $xsize 1 0 1 1 1. 1.", $log);

execute("gdal_translate -ot Float32 -of ENVI -b 3 $landsat $im_tmp",$log);
execute("swap_bytes $im_tmp $im3 4", $log);
execute("raspwr $im3 $xsize 1 0 1 1 1. 1.", $log);

execute("/bin/rm -f $im_tmp",$log);
exit(0);

sub execute{
  my ($command, $log) = @_;
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log  command: $command\n";}
  else {open(LOG,">$log") or die "ERROR $0 : cannot open log file: $log  command: $command\n";}
  LOG->autoflush;
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}
