#!/usr/bin/perl
use FileHandle;
use File::Basename;
#use List::Util

$sflag = 0;
$sc = 0.7;
$exp = .35;
$exp2 = 1;

if (($#ARGV + 1) < 2){die <<EOS ;}
*** Copyright 2014, Gamma Remote Sensing, v1.0 12-Jun-2013 clw ***
*** Calculate raster images for a list of MLI files ***

usage: $0 <MLI_tab> [width] [scale] [exp] 

    MLI_tab (input) single column list of MLI images
    width   number of samples/line
    scale   relative intensity display scale factor (default: $sc)
    exp     display exponent (default: $exp)

    NOTE: The current directory is denoted using . 
       
EOS

$mli_tab = $ARGV[0];
$width   = $ARGV[1];
$log = "mk_mli_ras.log";
$time = localtime;
print "*** $0 processing start: $time ***\n";
print "log file: $log\n"; 
open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n\n";
LOG->autoflush;print LOG "$0 @ARGV\n\n";	#print command line that was used
print LOG "$0 @ARGV\n\n";
print LOG "*** $0 processing start: $time ***\n";
open(MLI_TAB, "<$ARGV[0]") or die "\nERROR $0: Table of SLC images and parameter files does not exist: $ARGV[0]\n\n";
print "MLI_tab: $ARGV[0]\n"; 

if($#ARGV + 1 > 2){$sc = $ARGV[2];}
if($#ARGV + 1 > 3){$exp = $ARGV[3];} 

($sc > 0.0) or die "\nERROR $0: MLI display scale factor <= 0.0 : $sc\n";
($exp > 0.0) or die "\nERROR $0: MLI display exponent <= 0.0 : $exp\n";
  
print "MLI display scale factor: $sc\n";
print "MLI display exponent: $exp\n";
print "MLI width (samples): $width\n";
print LOG "MLI display scale factor: $sc\n";
print LOG "MLI display exponent: $exp\n";
print LOG "MLI width (samples): $width\n";
close LOG;

LINE: while (<MLI_TAB>) {	#read lines of processing list file
  chomp $_;			#remove new line from record
  next LINE if /^$/;		#skip blank lines in processing list
  next LINE if /^#/;		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  $mli = $fields[0];
  execute("raspwr $mli $width 1 0 1 1 $sc $exp", $log);
}

$time = localtime;
print "\n*** $0 processing end: $time ***\n";
open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n\n";
print LOG "\n*** $0 processing end: $time ***\n";
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "\nERROR $0: cannot open existing log file: $log\n";}
  else {open(LOG,">$log") or die "\nERROR $0: cannot open new log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1 >> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n";
}

