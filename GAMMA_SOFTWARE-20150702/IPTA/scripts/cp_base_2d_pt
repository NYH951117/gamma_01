#!/usr/bin/perl
use FileHandle;
use File::Basename;

if (($#ARGV + 1) < 4){die <<EOS ;}
*** $0
*** Copyright 2008, Gamma Remote Sensing, v1.0 27-Oct-2008 clw ***
*** Copy text baseline files defined by the RSLC_tab and itab to an IPTA baseline stack  ***

usage: $0 <RSLC_tab> <itab> <diff_dir> <pbase> 

    RSLC_tab  (input) two column list of resampled SLC filenames and SLC parameter filenames (including paths) (ascii)
                1. SLC filename  (includes path)
                2. SLC parameter filename (includes path)
    itab      (input) table associating interferogram stack records with pairs of SLC stack records (ascii)
                1. row number in SLC_tab of the reference SLC 
                2. row number in SLC_tab of SLC-2 of the interferogram
                3. line number in the itab
                4. flag used to indicate if this interferogram is used for IPTA processing (0:not used  1:used)
    diff_dir  directory containing unwrapped differential interferograms and baselines  
    pbase     (output) baseline parameter stack (enter - for none)
                           
EOS

$rslc_tab  = $ARGV[0];
$itab      = $ARGV[1];
$diff_dir  = $ARGV[2];
$pbase     = $ARGV[3];

open(RSLC_TAB, "<$rslc_tab") or die "\nERROR $0: table of resampled SLC images and parameter files does not exist: $rslc_tab\n\n";
print "resampled SLC images and parameter files: $rslc_tab\n"; 

open(ITAB, "<$itab") or die "\nERROR $0: table of interferometric pairs does not exist: $itab\n\n";
print "table of interferometric pairs: $itab\n"; 
-d $diff_dir or die "ERROR $0: differential interferogram directory does not exist\n";

$log = "cp_base_2d.log";  
open(LOG,">$log") or die "ERROR $0: cannot open log file: $log\n";
LOG->autoflush;

$time = localtime;
print "\n$0  @ARGV\n";
print "start: $time  log file: $log\n\n";
print "RSLC_tab:           $rslc_tab\n";
print "itab:               $itab\n";
print "diff. directory:    $diff_dir\\nn";

print LOG "\n$0  @ARGV\n";
print LOG "start: $time  log file: $log\n\n";
print LOG "RSLC_tab:           $rslc_tab\n";
print LOG "itab:               $itab\n";
print LOG "diff. directory:    $diff_dir\n\n";

$i = 1;
#read in the contents of the RSLC_TAB file and store in arrays

LINE: while (<RSLC_TAB>) {	#read lines of processing list file
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  $slc[$i] = $fields[0];
  $slc_par[$i] = $fields[1];
  -e $slc_par[$i] or die "ERROR $0: ISP image parameter file does not exist for slc: @slc2_par[$i]\n";
  printf LOG "%2d  $slc[$i]  $slc_par[$i]\n",$i;
  $i++;
} 
print LOG"\n";

unless ($pbase =~ m/-/) {  	#generate blank pbase stack
  $btmp = "/tmp/btmp";
  execute("rm -f $pbase",$log) if -e $pbase;	#erase existing baseline stack
  open(BTMP,">/tmp/btmp") or die "ERROR $0: cannot open temporary baseline file: $BLTMP\n";
  print BTMP <<EOSTR; 
initial_baseline(TCN):          0.0000000        0.0000000        0.0000000   m   m   m
initial_baseline_rate:          0.0000000        0.0000000        0.0000000   m/s m/s m/s
precision_baseline(TCN):        0.0000000        0.0000000        0.0000000   m   m   m
precision_baseline_rate:        0.0000000        0.0000000        0.0000000   m/s m/s m/s
unwrap_phase_constant:          0.00000     radians
EOSTR
  close BTMP;
  LINE: while (<ITAB>) {	#read lines of ITAB file
    chomp $_;			#remove new line from record
    next LINE if /^$/; 		#skip blank lines in processing list
    next LINE if /^#/; 		#skip comments in processing list
    @fields = split;		#extract the scene identifier and other parameters on the line if present
    $n > 0 or $rmax = @fields[2]; #determine maximum record number 
    if($rmax < @fields[2]){$rmax =  @fields[2];}
  }

  print "maximum record number in baseline stack: $rmax\n\n";
  
  seek ITAB, 0, 0;			#rewind the ITAB file to the beginning
  for($i = 1; $i <= $rmax; $i++){	#created blank filled baseline stack
    execute("base_par_pt $btmp $pbase $i 1",$log);
  }	
  execute("rm -f $btmp",$log);
}

$n = 0;
LINE: while (<ITAB>) {		#read lines of processing list file
  $n++;
  chomp $_;			#remove new line from record
  next LINE if /^$/; 		#skip blank lines in processing list
  next LINE if /^#/; 		#skip comments in processing list
  @fields = split;		#extract the scene identifier and other parameters on the line if present
  next LINE if ($fields[3] == 0); #do not process interferograms with the layer flag set to 0

  $slc1 = $slc[$fields[0]];
  $slc1_par = $slc_par[$fields[0]];
#  print " slc1: $slc1\n";
  my ($s1, $dir1, $ext1) = fileparse($slc1, qr/\.[^.]*/); #extension is the last bit after the last period   

  $slc2 = $slc[$fields[1]];
  $slc2_par = $slc_par[$fields[1]];
#  print " slc2: $slc2\n";
  my ($s2, $dir2, $ext2) = fileparse($slc2, qr/\.[^.]*/); #extension is the last bit after the last period   
  next LINE if ($s1 =~ m/$s2/);
  $fn = $diff_dir."/".$s1."_".$s2;

  $base = $fn.".base";
  $time = localtime;
  
  printf "\n*** diff. interferogram:%4d  $time ***\n",$n;
  print "slc1: $slc1   slc1_par: $slc1_par\n";
  print "slc2: $slc2   slc2_par: $slc2_par\n";
  print "baseline file: $base\n";
  -e $base or die "ERROR $0: baseline file does not exist: $base\n";

  execute("base_par_pt $base $pbase $fields[2] 1",$log);	
}
$time = localtime;
print "\nprocessing end: $time\n";
print LOG "\nprocessing end: $time\n";
exit 0;

sub execute{
  my ($command, $log) = @_;  
  if (-e $log){open(LOG,">>$log") or die "ERROR $0: cannot open log file: $log\n";}
  else {open(LOG,">$log") or die "ERROR $0 : cannot open log file: $log\n";} 
  LOG->autoflush; 
  print "$command\n";
  print LOG ("\n${command}\n");
  close LOG;  
  $exit = system("$command 1>> $log");
  $exit == 0 or die "ERROR $0: non-zero exit status: $command\n"
}

sub extract_param{
  my ($infile,$keyword) = @_;
  open(PAR_IN,$infile) || die "ERROR $0: cannot open parameter file: $infile\n";

  while(<PAR_IN>){
    chomp;
    @tokens = split;
    if($tokens[0] eq $keyword){close PAR_IN; return @tokens;}
  }
  close PAR_IN;
  die "ERROR $0: keyword $keyword not found in file: $infile\n";
}
